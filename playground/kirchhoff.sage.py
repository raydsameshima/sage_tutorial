

# This file was *autogenerated* from the file kirchhoff.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_6p0 = RealNumber('6.0'); _sage_const_12p0 = RealNumber('12.0'); _sage_const_5p0 = RealNumber('5.0'); _sage_const_20p0 = RealNumber('20.0'); _sage_const_50p0 = RealNumber('50.0')# Kirchhoff

# Declare variables for two loop circuit:
I1,I2,I3,E1,E2,R1,R2,R3 = var("I1,I2,I3,E1,E2,R1,R2,R3")

# Define a junction rule and two loop rules:
J1 = I1 + I3 == I2
L1 = E1 - R1*I1 - I2*R2 == Integer(_sage_const_0 )
L2 = E2 - R3*I3 - I2*R2 == Integer(_sage_const_0 )

# Assign the solution:
sol = solve( [J1,L1,L2], I1,I2,I3)

# Assign the symbolic expression for each current:
I1 = sol[_sage_const_0 ][_sage_const_0 ].rhs()
I2 = sol[_sage_const_0 ][_sage_const_1 ].rhs()
I3 = sol[_sage_const_0 ][_sage_const_2 ].rhs()

print("The symbolic expressions are:\n", I1, "\n", I2, "\n", I3 )


print("I1 is: ", I1.subs( [E1==_sage_const_6p0 , E2==_sage_const_12p0 , R1==_sage_const_5p0 , R2==_sage_const_20p0 , R3==_sage_const_50p0 ]), " [amp]")
print("I2 is: ", I2.subs( [E1==_sage_const_6p0 , E2==_sage_const_12p0 , R1==_sage_const_5p0 , R2==_sage_const_20p0 , R3==_sage_const_50p0 ]), " [amp]")
print("I3 is: ", I3.subs( [E1==_sage_const_6p0 , E2==_sage_const_12p0 , R1==_sage_const_5p0 , R2==_sage_const_20p0 , R3==_sage_const_50p0 ]), " [amp]")

# Swapping E1, we obtain:
print("If we swap E1, then:")
print("I1 is: ", I1.subs( [E1==-_sage_const_6p0 , E2==_sage_const_12p0 , R1==_sage_const_5p0 , R2==_sage_const_20p0 , R3==_sage_const_50p0 ]), " [amp]")
print("I2 is: ", I2.subs( [E1==-_sage_const_6p0 , E2==_sage_const_12p0 , R1==_sage_const_5p0 , R2==_sage_const_20p0 , R3==_sage_const_50p0 ]), " [amp]")
print("I3 is: ", I3.subs( [E1==-_sage_const_6p0 , E2==_sage_const_12p0 , R1==_sage_const_5p0 , R2==_sage_const_20p0 , R3==_sage_const_50p0 ]), " [amp]")

# Swapping E2, we obtain:
print("If we swap E2, then:")
print("I1 is: ", I1.subs( [E1==_sage_const_6p0 , E2==-_sage_const_12p0 , R1==_sage_const_5p0 , R2==_sage_const_20p0 , R3==_sage_const_50p0 ]), " [amp]")
print("I2 is: ", I2.subs( [E1==_sage_const_6p0 , E2==-_sage_const_12p0 , R1==_sage_const_5p0 , R2==_sage_const_20p0 , R3==_sage_const_50p0 ]), " [amp]")
print("I3 is: ", I3.subs( [E1==_sage_const_6p0 , E2==-_sage_const_12p0 , R1==_sage_const_5p0 , R2==_sage_const_20p0 , R3==_sage_const_50p0 ]), " [amp]")

# Swapping E1 and E2, we obtain:
print("If we swap both E1 abd E2, then:")
print("I1 is: ", I1.subs( [E1==-_sage_const_6p0 , E2==-_sage_const_12p0 , R1==_sage_const_5p0 , R2==_sage_const_20p0 , R3==_sage_const_50p0 ]), " [amp]")
print("I2 is: ", I2.subs( [E1==-_sage_const_6p0 , E2==-_sage_const_12p0 , R1==_sage_const_5p0 , R2==_sage_const_20p0 , R3==_sage_const_50p0 ]), " [amp]")
print("I3 is: ", I3.subs( [E1==-_sage_const_6p0 , E2==-_sage_const_12p0 , R1==_sage_const_5p0 , R2==_sage_const_20p0 , R3==_sage_const_50p0 ]), " [amp]")


