

# This file was *autogenerated* from the file 02poly.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3)# IPython log file

# https://carpentries-incubator.github.io/sage-lesson/02-multiply-matrix-and-vector/

# x is predefined indeterminate (of course, we can overwrite it):
x
type(x)

# y is not:
# y

# Define a polynomial:
f=x**Integer(_sage_const_2 )-x-Integer(_sage_const_1 )
type(f)
f

sol= solve([f],x)

sol1 = sol[Integer(_sage_const_0 )].rhs()
sol1.n()

sol2 = sol[Integer(_sage_const_1 )].rhs()
sol2.n()

# Withoug declaring y and z?
# v = vector([x,y,z])

x,y,z = SR.var("x y z")
v = vector([x,y,z])
v

I3 = -identity_matrix(Integer(_sage_const_3 ))
I3

I3*v
-Integer(_sage_const_1 )*v
v2 = v.subs(x=Integer(_sage_const_1 ),y=Integer(_sage_const_0 ),z=Integer(_sage_const_3 ))
v2.print()

